name: IPO Real Structure Crawler

on:
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:

jobs:
  ipo-real-crawl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 lxml selenium webdriver-manager
        
    - name: Real structure based crawling
      run: |
        python << 'EOF'
        import requests
        import json
        from datetime import datetime, timedelta
        import time
        import re
        from bs4 import BeautifulSoup
        from urllib.parse import quote

        def extract_company_id(onclick_text):
            """fnDetailView('20250109000190') 패턴에서 회사 ID 추출"""
            try:
                if 'fnDetailView' in onclick_text:
                    match = re.search(r"fnDetailView\('([^']+)'\)", onclick_text)
                    if match:
                        return match.group(1)
                return None
            except:
                return None

        def get_market_type(img_src):
            """이미지 경로로 시장 구분 판별"""
            if not img_src:
                return '기타'
            if 'icn_t_yu.gif' in img_src:
                return '유가증권'
            elif 'icn_t_ko.gif' in img_src:
                return '코스닥'
            else:
                return '기타'

        def crawl_38_calendar_real():
            """38커뮤니케이션 실제 구조 기반 달력 크롤링"""
            try:
                print("🏢 38커뮤니케이션 실제 구조 기반 크롤링 시작...")
                
                # 현재 월과 다음 월 크롤링
                current_date = datetime.now()
                all_events = []
                
                for month_offset in range(2):  # 이번 달, 다음 달
                    target_date = current_date.replace(day=1) + timedelta(days=32 * month_offset)
                    year = target_date.year
                    month = target_date.month
                    
                    print(f"📅 {year}년 {month}월 크롤링 중...")
                    
                    # 38커뮤니케이션 달력 URL (실제 경로에 맞게 조정)
                    url = f"http://www.38.co.kr/html/fund/index.html"
                    params = {
                        'o': 'k',
                        'year': year,
                        'month': f"{month:02d}"
                    }
                    
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                        'Accept-Language': 'ko-KR,ko;q=0.8,en-US;q=0.5,en;q=0.3',
                        'Accept-Encoding': 'gzip, deflate',
                        'Connection': 'keep-alive',
                        'Referer': 'http://www.38.co.kr/'
                    }
                    
                    try:
                        response = requests.get(url, params=params, headers=headers, timeout=20)
                        if response.status_code == 200:
                            response.encoding = 'euc-kr'  # 한글 인코딩 처리
                            soup = BeautifulSoup(response.text, 'html.parser')
                            
                            # 달력 테이블 찾기
                            calendar_table = soup.find('table')
                            if not calendar_table:
                                print(f"   ❌ {year}-{month:02d} 달력 테이블을 찾을 수 없음")
                                continue
                            
                            # 모든 td (날짜 셀) 처리
                            date_cells = calendar_table.find_all('td')
                            
                            for cell in date_cells:
                                # 날짜 추출 (숫자만)
                                cell_text = cell.get_text().strip()
                                day_match = re.search(r'(\d+)', cell_text)
                                if not day_match:
                                    continue
                                
                                day = int(day_match.group(1))
                                date_str = f"{year}-{month:02d}-{day:02d}"
                                
                                # 해당 날짜의 이벤트 리스트 (ul 태그)
                                ul = cell.find('ul')
                                if not ul:
                                    continue
                                
                                # 모든 li 요소 처리
                                li_elements = ul.find_all('li')
                                current_event_type = None
                                
                                for li in li_elements:
                                    # 이벤트 타입 체크 (배경색이 있는 strong 태그)
                                    style = li.get('style', '')
                                    if 'background:#EBF6F8' in style or 'background: #EBF6F8' in style:
                                        strong = li.find('strong')
                                        if strong:
                                            current_event_type = strong.get_text().strip()
                                            print(f"   📋 {date_str} 이벤트 타입: {current_event_type}")
                                            continue
                                    
                                    # 회사 링크 체크
                                    link = li.find('a')
                                    if link and current_event_type:
                                        onclick = link.get('onclick', '')
                                        company_id = extract_company_id(onclick)
                                        
                                        if company_id:
                                            # 회사명 추출
                                            company_name = link.get_text().strip()
                                            
                                            # 시장 구분 추출
                                            img = link.find('img')
                                            market_type = '기타'
                                            if img:
                                                img_src = img.get('src', '')
                                                market_type = get_market_type(img_src)
                                            
                                            # 이벤트 데이터 생성
                                            event_data = {
                                                'date': date_str,
                                                'day': day,
                                                'event_type': current_event_type,
                                                'company_name': company_name,
                                                'company_id': company_id,
                                                'market_type': market_type,
                                                'month': f"{year}-{month:02d}",
                                                'crawl_time': datetime.now().isoformat(),
                                                'source': '38커뮤니케이션'
                                            }
                                            
                                            all_events.append(event_data)
                                            print(f"   ✅ {date_str} {current_event_type}: {company_name} ({market_type})")
                            
                            print(f"✅ {year}-{month:02d} 완료: {len([e for e in all_events if e['month'] == f'{year}-{month:02d}'])}개 이벤트")
                            
                        else:
                            print(f"   ❌ {year}-{month:02d} HTTP 오류: {response.status_code}")
                            
                        time.sleep(3)  # 서버 부하 방지
                        
                    except Exception as e:
                        print(f"   ❌ {year}-{month:02d} 크롤링 실패: {e}")
                        continue
                
                return all_events
                
            except Exception as e:
                print(f"❌ 전체 크롤링 실패: {e}")
                return []

        def categorize_events_by_date(events):
            """날짜별 이벤트 분류"""
            today = datetime.now().date()
            
            categorized = {
                'today_events': [],      # 오늘
                'week_events': [],       # 이번주 (7일)
                'month_events': [],      # 이번달
                'upcoming_events': [],   # 예정
                'by_type': {
                    '상장': [],
                    'IR': [],
                    '수요예측': [],
                    '청약': [],
                    '기타': []
                }
            }
            
            for event in events:
                try:
                    event_date = datetime.strptime(event['date'], '%Y-%m-%d').date()
                    days_diff = (event_date - today).days
                    
                    # 날짜별 분류
                    if days_diff == 0:
                        categorized['today_events'].append(event)
                    elif 0 < days_diff <= 7:
                        categorized['week_events'].append(event)
                    elif 0 <= days_diff <= 30:
                        categorized['month_events'].append(event)
                    elif days_diff > 0:
                        categorized['upcoming_events'].append(event)
                    
                    # 타입별 분류
                    event_type = event['event_type']
                    if event_type in categorized['by_type']:
                        categorized['by_type'][event_type].append(event)
                    else:
                        categorized['by_type']['기타'].append(event)
                        
                except Exception as e:
                    print(f"   ❌ 이벤트 분류 실패: {e}")
                    categorized['by_type']['기타'].append(event)
            
            return categorized

        def get_detailed_company_info(company_id):
            """회사 상세 정보 수집 (제한적)"""
            try:
                # 상세 정보는 나중에 추가 개발
                return {
                    'description': '',
                    'price_info': '',
                    'schedule_detail': ''
                }
            except:
                return {}

        def main():
            print('🏢 38커뮤니케이션 실제 구조 기반 크롤링 시작...')
            
            # 메인 크롤링
            events = crawl_38_calendar_real()
            print(f"📊 총 {len(events)}개 이벤트 수집 완료")
            
            if not events:
                print("❌ 수집된 이벤트가 없습니다.")
                return
            
            # 이벤트 분류
            categorized = categorize_events_by_date(events)
            
            # 통계 생성
            stats = {
                'total_events': len(events),
                'today_count': len(categorized['today_events']),
                'week_count': len(categorized['week_events']),
                'month_count': len(categorized['month_events']),
                'by_type_count': {k: len(v) for k, v in categorized['by_type'].items()},
                'markets': {}
            }
            
            # 시장별 통계
            for event in events:
                market = event['market_type']
                stats['markets'][market] = stats['markets'].get(market, 0) + 1
            
            # 최종 JSON 데이터
            final_data = {
                'update_time': datetime.now().strftime('%Y년 %m월 %d일 %H시 %M분'),
                'crawl_time': datetime.now().isoformat(),
                'data_source': '38커뮤니케이션 실제구조 크롤링',
                'crawl_method': 'HTML달력 직접파싱',
                'total_events': len(events),
                'statistics': stats,
                'categorized_events': categorized,
                'all_events': events
            }
            
            # JSON 파일 저장
            with open('ipo_calendar_real.json', 'w', encoding='utf-8') as f:
                json.dump(final_data, f, ensure_ascii=False, indent=2)
            
            # 결과 출력
            print(f'\n🎉 실제 구조 기반 크롤링 완료!')
            print(f'📊 총 이벤트: {len(events)}개')
            print(f'📅 오늘 이벤트: {stats["today_count"]}개')
            print(f'📈 이번주 이벤트: {stats["week_count"]}개')
            print(f'🏢 이번달 이벤트: {stats["month_count"]}개')
            print(f'📋 타입별 통계:')
            for event_type, count in stats['by_type_count'].items():
                print(f'   - {event_type}: {count}개')
            print(f'🏛️ 시장별 통계:')
            for market, count in stats['markets'].items():
                print(f'   - {market}: {count}개')
            
        if __name__ == "__main__":
            main()
        EOF
        
    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "IPO Real Structure Crawler"
        git add ipo_calendar_real.json
        if git diff --staged --quiet; then
          echo "변경사항 없음"
        else
          git commit -m "🏢 실제구조 기반 공모주 달력 크롤링 $(date +'%Y-%m-%d %H:%M')"
          git push
          echo "✅ 실제 구조 기반 데이터 업데이트 완료"
        fi
